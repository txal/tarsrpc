// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.29 by WSRD Tencent.
// Generated from `./module/new.jce'
// **********************************************************************

package vvideo
import "reflect"
import "yytars/jce_parser/gojce"

type FileListInfo struct {
    M_filename string
    M_format int32
    M_status int32
    M_copyright int32
    M_fcount int32
}

func (_obj *FileListInfo) resetDefault() {
    _obj.M_filename = ""
    _obj.M_format = 0
    _obj.M_status = 0
    _obj.M_copyright = 0
    _obj.M_fcount = 0
}

func (_obj *FileListInfo) WriteTo(_os gojce.JceOutputStream) error {
    var _err error
    if _err = _os.Write(reflect.ValueOf(&_obj.M_filename), 1); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_format), 2); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_status), 3); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_copyright), 4); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_fcount), 5); _err != nil {
        return _err
    }
    return nil
}

func (_obj *FileListInfo) ReadFrom(_is gojce.JceInputStream) error {
    var _err error
    var _i interface{}
    _obj.resetDefault()
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_filename), 1, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_filename = _i.(string)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_format), 2, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_format = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_status), 3, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_status = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_copyright), 4, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_copyright = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_fcount), 5, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_fcount = _i.(int32)
    }
    return nil
}

func (_obj *FileListInfo) Display(_ds gojce.JceDisplayer) {
    _ds.Display(reflect.ValueOf(&_obj.M_filename), "filename")
    _ds.Display(reflect.ValueOf(&_obj.M_format), "format")
    _ds.Display(reflect.ValueOf(&_obj.M_status), "status")
    _ds.Display(reflect.ValueOf(&_obj.M_copyright), "copyright")
    _ds.Display(reflect.ValueOf(&_obj.M_fcount), "fcount")
}

