// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.29 by WSRD Tencent.
// Generated from `../jce/src/test/test.jce'
// **********************************************************************

package Test
import "reflect"
import "yytars/jce_parser/gojce"

type TestInfo struct {
    M_ibegin int32
    M_b bool
    M_si int16
    M_by byte
    M_ii int32
    M_li int64
    M_f float32
    M_d float64
    M_s string
    M_vi []int32
    M_mi map[int32]string
    M_aa A
    M_iend int32
    M_vb []byte
    M_vi2 []A
    M_mi2 map[int32]A
    M_uii int64
    M_msv map[string][]A
    M_vf []float32
    M_msb map[string]bool
}

func (_obj *TestInfo) resetDefault() {
    _obj.M_ibegin = 0
    _obj.M_b = true
    _obj.M_si = 0
    _obj.M_by = 0
    _obj.M_ii = 0
    _obj.M_li = 1
    _obj.M_f = 0
    _obj.M_d = 0
    _obj.M_s = "test default"
    _obj.M_iend = 0
    _obj.M_uii = 0
}

func (_obj *TestInfo) WriteTo(_os gojce.JceOutputStream) error {
    var _err error
    if _err = _os.Write(reflect.ValueOf(&_obj.M_ibegin), 0); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_b), 1); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_si), 2); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_by), 3); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_ii), 4); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_li), 5); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_f), 6); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_d), 7); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_s), 8); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_vi), 9); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_mi), 10); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_aa), 11); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_iend), 12); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_vb), 13); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_vi2), 15); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_mi2), 16); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_uii), 17); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_msv), 18); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_vf), 19); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_msb), 20); _err != nil {
        return _err
    }
    return nil
}

func (_obj *TestInfo) ReadFrom(_is gojce.JceInputStream) error {
    var _err error
    var _i interface{}
    _obj.resetDefault()
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_ibegin), 0, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_ibegin = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_b), 1, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_b = _i.(bool)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_si), 2, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_si = _i.(int16)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_by), 3, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_by = _i.(byte)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_ii), 4, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_ii = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_li), 5, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_li = _i.(int64)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_f), 6, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_f = _i.(float32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_d), 7, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_d = _i.(float64)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_s), 8, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_s = _i.(string)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_vi), 9, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_vi = _i.([]int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_mi), 10, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_mi = _i.(map[int32]string)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_aa), 11, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_aa = _i.(A)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_iend), 12, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_iend = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_vb), 13, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_vb = _i.([]byte)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_vi2), 15, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_vi2 = _i.([]A)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_mi2), 16, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_mi2 = _i.(map[int32]A)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_uii), 17, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_uii = _i.(int64)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_msv), 18, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_msv = _i.(map[string][]A)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_vf), 19, false)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_vf = _i.([]float32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_msb), 20, false)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_msb = _i.(map[string]bool)
    }
    return nil
}

func (_obj *TestInfo) Display(_ds gojce.JceDisplayer) {
    _ds.Display(reflect.ValueOf(&_obj.M_ibegin), "ibegin")
    _ds.Display(reflect.ValueOf(&_obj.M_b), "b")
    _ds.Display(reflect.ValueOf(&_obj.M_si), "si")
    _ds.Display(reflect.ValueOf(&_obj.M_by), "by")
    _ds.Display(reflect.ValueOf(&_obj.M_ii), "ii")
    _ds.Display(reflect.ValueOf(&_obj.M_li), "li")
    _ds.Display(reflect.ValueOf(&_obj.M_f), "f")
    _ds.Display(reflect.ValueOf(&_obj.M_d), "d")
    _ds.Display(reflect.ValueOf(&_obj.M_s), "s")
    _ds.Display(reflect.ValueOf(&_obj.M_vi), "vi")
    _ds.Display(reflect.ValueOf(&_obj.M_mi), "mi")
    _ds.Display(reflect.ValueOf(&_obj.M_aa), "aa")
    _ds.Display(reflect.ValueOf(&_obj.M_iend), "iend")
    _ds.Display(reflect.ValueOf(&_obj.M_vb), "vb")
    _ds.Display(reflect.ValueOf(&_obj.M_vi2), "vi2")
    _ds.Display(reflect.ValueOf(&_obj.M_mi2), "mi2")
    _ds.Display(reflect.ValueOf(&_obj.M_uii), "uii")
    _ds.Display(reflect.ValueOf(&_obj.M_msv), "msv")
    _ds.Display(reflect.ValueOf(&_obj.M_vf), "vf")
    _ds.Display(reflect.ValueOf(&_obj.M_msb), "msb")
}

func (_obj *TestInfo) WriteJson(_en gojce.JceJsonEncoder) ([]byte, error) {
    var _err error
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_ibegin), "ibegin")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_b), "b")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_si), "si")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_by), "by")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_ii), "ii")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_li), "li")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_f), "f")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_d), "d")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_s), "s")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_vi), "vi")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_mi), "mi")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_aa), "aa")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_iend), "iend")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_vb), "vb")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_vi2), "vi2")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_mi2), "mi2")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_uii), "uii")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_msv), "msv")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_vf), "vf")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_msb), "msb")
    if _err != nil {
        return nil, _err
    }
    return _en.ToBytes(), nil
}

func (_obj *TestInfo) ReadJson(_de gojce.JceJsonDecoder) error {
    return _de.DecodeJSON(reflect.ValueOf(_obj))
}

