// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.0.0.29 by WSRD Tencent.
// Generated from `../jce/src/test/test.jce'
// **********************************************************************

package Test
import "reflect"
import "yytars/jce_parser/gojce"

type B struct {
    M_a int32
    M_f float32
}

func (_obj *B) resetDefault() {
    _obj.M_a = 0
    _obj.M_f = 0
}

func (_obj *B) WriteTo(_os gojce.JceOutputStream) error {
    var _err error
    if _err = _os.Write(reflect.ValueOf(&_obj.M_a), 1); _err != nil {
        return _err
    }
    if _err = _os.Write(reflect.ValueOf(&_obj.M_f), 2); _err != nil {
        return _err
    }
    return nil
}

func (_obj *B) ReadFrom(_is gojce.JceInputStream) error {
    var _err error
    var _i interface{}
    _obj.resetDefault()
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_a), 1, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_a = _i.(int32)
    }
    _i, _err = _is.Read(reflect.TypeOf(_obj.M_f), 2, true)
    if _err != nil {
        return _err
    }
    if _i != nil {
        _obj.M_f = _i.(float32)
    }
    return nil
}

func (_obj *B) Display(_ds gojce.JceDisplayer) {
    _ds.Display(reflect.ValueOf(&_obj.M_a), "a")
    _ds.Display(reflect.ValueOf(&_obj.M_f), "f")
}

func (_obj *B) WriteJson(_en gojce.JceJsonEncoder) ([]byte, error) {
    var _err error
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_a), "a")
    if _err != nil {
        return nil, _err
    }
    _err = _en.EncodeJSON(reflect.ValueOf(&_obj.M_f), "f")
    if _err != nil {
        return nil, _err
    }
    return _en.ToBytes(), nil
}

func (_obj *B) ReadJson(_de gojce.JceJsonDecoder) error {
    return _de.DecodeJSON(reflect.ValueOf(_obj))
}

