// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 1.6.0 by WSRD Tencent.
// Generated from `PropertyPlusF.jce'
// **********************************************************************

package LogStat

import (
	"reflect"

	"code.com/tars/goframework/jce_parser/gojce"
)

type StatOneLog struct {
	Logname string
	Keys    []string
	Values  []StatValue
}

func (_obj *StatOneLog) resetDefault() {
	_obj.Logname = ""
}

func (_obj *StatOneLog) WriteTo(_os gojce.JceOutputStream) error {
	var _err error
	if _err = _os.Write(reflect.ValueOf(&_obj.Logname), 0); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.Keys), 1); _err != nil {
		return _err
	}
	if _err = _os.Write(reflect.ValueOf(&_obj.Values), 2); _err != nil {
		return _err
	}
	return nil
}

func (_obj *StatOneLog) ReadFrom(_is gojce.JceInputStream) error {
	var _err error
	var _i interface{}
	_obj.resetDefault()
	_i, _err = _is.Read(reflect.TypeOf(_obj.Logname), 0, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.Logname = _i.(string)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.Keys), 1, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.Keys = _i.([]string)
	}
	_i, _err = _is.Read(reflect.TypeOf(_obj.Values), 2, true)
	if _err != nil {
		return _err
	}
	if _i != nil {
		_obj.Values = _i.([]StatValue)
	}
	return nil
}

func (_obj *StatOneLog) Display(_ds gojce.JceDisplayer) {
	_ds.Display(reflect.ValueOf(&_obj.Logname), "logname")
	_ds.Display(reflect.ValueOf(&_obj.Keys), "keys")
	_ds.Display(reflect.ValueOf(&_obj.Values), "values")
}

func (_obj *StatOneLog) WriteJson(_en gojce.JceJsonEncoder) ([]byte, error) {
	var _err error
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.Logname), "logname")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.Keys), "keys")
	if _err != nil {
		return nil, _err
	}
	_err = _en.EncodeJSON(reflect.ValueOf(&_obj.Values), "values")
	if _err != nil {
		return nil, _err
	}
	return _en.ToBytes(), nil
}

func (_obj *StatOneLog) ReadJson(_de gojce.JceJsonDecoder) error {
	return _de.DecodeJSON(reflect.ValueOf(_obj))
}
