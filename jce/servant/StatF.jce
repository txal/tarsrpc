
module taf
{

//模块间调用包头 Mic = module interval call
struct StatMicMsgHead
{
      0 require string masterName;       //主调模块name
      1 require string slaveName;        //被调模块name
      2 require string interfaceName;    //被调模块接口name
      3 require string masterIp;         //主调ip
      4 require string slaveIp;          //被调ip
      5 require int slavePort;           //被调端口
      6 require int returnValue;         //返回值   
      7 optional string slaveSetName;    //被调set名
      8 optional string slaveSetArea;    //被调set地区名   
      9 optional string slaveSetID;      //被调set组名
      10 optional string tafVersion;     //主调taf版本
	  11 optional string sMasterSetInfo;  //主调set名 setName.setArea.setID
	  12 optional string sSlaveContainer; //被掉容器名
	  13 optional string sMasterContainer;//主调容器名
	  14 optional int iStatVer=1;		  //statF协议版本
};

key[StatMicMsgHead, masterName, slaveName,interfaceName,masterIp,slaveIp,slavePort,returnValue, slaveSetName, slaveSetArea, slaveSetID, tafVersion,
	 sMasterSetInfo, sSlaveContainer, sMasterContainer, iStatVer];
   
//模块间调用包体协议
struct StatMicMsgBody
{
      0 require int count;                  //成功调用量
      1 require int timeoutCount;           //超时调用量
      2 require int execCount;              //异常调用量
                                            //以下字段针对成功调用量所作统计
      3 require map<int,int> intervalCount; //时间间隔内调用量
      4 require long totalRspTime;          //调用总时间用来计算平均时间
      5 require int maxRspTime;             //最大响应时间
      6 require int minRspTime;             //最小响应时间
      7 optional map<long, int> retValue;   //统计接口的返回值，当自动扩容灰度节点时，会用到
      8 optional int weightValue;			//权重值
      9 optional int weightCount;			//权重值的累积次数
};

//模块间调用采样信息
struct StatSampleMsg
{
      0 require string unid;             //唯一id值        
      1 require string masterName;       //主调模块name
      2 require string slaveName;        //被调模块name
      3 require string interfaceName;    //被调模块接口name
      4 require string masterIp;         //主调ip
      5 require string slaveIp;          //被调ip
      6 require int depth;               //深度值  
      7 require int width;               //广度值      
      8 require int parentWidth;         //父节点广度值  
};

struct ProxyInfo
{
	0 require bool bFromClient;//是否来自客户端
};
/**
 *
 * 上报服务的接口
 *
 **/
interface StatF
{
      /**
      * 上报模块间调用信息 Mic = module interval call
      * @param statmsg,             上报信息
      * @param bFromServer,         上报源  bFromClient: true 客户端发起的上报 false 服务端发起上报
      * @return int,                返回0表示成功
      */
      int reportMicMsg( map<StatMicMsgHead,StatMicMsgBody> msg, bool bFromClient);
      

      /**
      * 上报模块间调用采样信息 Mic = module interval call
      * @param msg,               上报信息
       * @return int,                返回0表示成功
      */
      int reportSampleMsg(vector<StatSampleMsg> msg);

	  /**
      * 此接口专门为proxy提供，上报模块间调用信息 Mic = module interval call
      * @param statmsg,             上报信息
      * @param proxyInfo,           为以后支持是否使用proxy
      * @return int,                返回0表示成功
      */
	  int reportProxyMicMsg(map<StatMicMsgHead,StatMicMsgBody> msg, ProxyInfo proxyInfo);
};

}; 
